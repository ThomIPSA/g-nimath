import matplotlib.pyplot as plt
import math
import numpy as np

#programme des 4 méthodes:

#1 Point Fixe

def PointFixe(g, x0, epsilon, Nitermax):
    xold = x0
    xnew = g(xold)
    n = 1
    while abs(xnew-xold) > epsilon and n < Nitermax :
        xold = xnew
        xnew = g(xold)
        n+=1
    return xnew, n


def PointFixeAlpha(g, x0, epsilon, Nitermax, alpha):
    xold = x0
    xnew = g(xold)
    n = 1
    x_n = []
    l_n = []
    e_n = []
    while abs(xnew-xold) > epsilon and n < Nitermax :
        xold = xnew
        xnew = g(xold)
        n+=1
        x_n.append(xnew)
        l_n.append(n)
        e_n.append(abs(xnew)-alpha)
    return xnew, n, x_n, l_n, e_n

#2 Newton

def Newton(f, fder, x0, epsilon, Nitermax):
    xold = x0
    xnew = xold - (f(xold)/fder(xold))
    n = 1
    while abs(xnew-xold) > epsilon and n < Nitermax :
        xold = xnew
        xnew = xold - (f(xold)/fder(xold))
        n+=1
        
    return xnew, n


def NewtonAlpha(f, fder, x0, epsilon, Nitermax, alpha):
    xold = x0
    xnew = xold - (f(xold)/fder(xold))
    n = 1
    x_n = []
    l_n = []
    l_en = []
    while abs(xnew-xold) > epsilon and n < Nitermax :
        xold = xnew
        xnew = xold - (f(xold)/fder(xold))
        n+=1
        
        x_n.append(xnew)
        l_n.append(n)
        l_en.append(abs(xnew-alpha))
        
    return xnew, n, x_n, l_n, l_en


#3 Dichotomie

def Dichotomie(f, a0, b0, epsilon, Nitermax):
    an = a0
    bn = b0
    n = 1
    while abs(bn - an)> epsilon and n<Nitermax:
        m = (an + bn)/2
        if (f(an)*f(m) <= 0):
            bn = m
        else :
            an = m
        n+=1

    return m, n

def DichotomieAlpha(f, a0, b0, epsilon, Nitermax, alpha):
    an = a0
    bn = b0
    n = 1
    x_n = []
    l_n = []
    e_n = []
    while abs(bn - an)> epsilon and n<Nitermax:
        m = (an + bn)/2
        if (f(an)*f(m) <= 0):
            bn = m
        else :
            an = m
        n+=1
        x_n.append(m)
        l_n.append(n)
        e_n.append((m)-alpha)

    return m, n, x_n, l_n, e_n


#4 Sécante

def Secante(f, x0, x1, epsilon, Nitermax):
    c = x0-f(x0)*(x1-x0)/(f(x1)-f(x0))
    c_avant = x0
    n = 1
    while abs(c-c_avant) > epsilon:
        if f(x0)*f(c) > 0:
            x0 = c
        else:
            x1 = c
        c_avant = c
        c = x0-f(x0)*(x1-x0)/(f(x1)-f(x0))
        n = n+1
    return c, n

def SecanteAlpha(f, x0, x1, epsilon, Nitermax, alpha):
    x_n = []
    l_n = []
    e_n = []
    c = x0-f(x0)*(x1-x0)/(f(x1)-f(x0))
    c_avant = x0
    n = 1
    while abs(c-c_avant) > epsilon and n<Nitermax:
        if f(x0)*f(c) > 0:
            x0 = c
        else:
            x1 = c
        c_avant = c
        c = x0-f(x0)*(x1-x0)/(f(x1)-f(x0))
        n = n+1
        x_n.append(c)
        l_n.append(n)
        e_n.append((c)-alpha)
    return c, n, x_n, l_n, e_n



#question 2 tp4 équation: 2x = 1+sin(x)

def g(x):
    return((1+math.sin(x))/2)

print(PointFixe(g, 0, 10**(-14), 5*10**(4)))
alpha = 0.88786221157086
print(PointFixeAlpha(g, 0, 10**(-6), 5*10**(4), 0.88786221157086))

def f(x):
    return((2*x)-(1+math.sin(x)))

def fder(x):
    return(2-math.cos(x))

print(Newton(f, fder, 0, 10**(-14), 5*10**(4)))
alpha = 0.88786221157086
print(NewtonAlpha(f, fder, 0, 10**(-6), 5*10**(4), 0.88786221157086))

print(Dichotomie(f, 0, 1, 10**(-14), 50000))
alpha = 0.88786221157086
print(DichotomieAlpha(f, 0, 1, 10**(-6), 50000, 0.88786221157086))

print(Secante(f, 0, 1, 10**(-14), 50000))
alpha = 0.88786221157086
print(SecanteAlpha(f, 0, 1, 10**(-6), 50000, 0.88786221157086))


#graphique de la question 2 selon les 4 méthodes

plt.title('Evolution des erreurs selon les 4 méthodes')
PointFixe = plt.plot([i for i in range(2, 15)], [-0.14814944226875848, -0.050824325082515664, -0.016530833862466787, -0.005268828045469909, -0.0016678803341764192, -0.0005268153622762783, -0.00016628297487308874, -5.247361025617625e-05, -1.6557841865827427e-05, -5.224646716261994e-06, -1.6485688987266656e-06, -5.201831957402092e-07, -1.6413652170754744e-07], label = 'PointFixe')
Newton = plt.plot([i for i in range(2, 6)], [0.003533783757894038, 3.5378294920285214e-06, 3.552269589590651e-12, 5.995204332975845e-15], label = 'Newton')
Dichotomie = plt.plot([i for i in range(2, 22)], [-0.38786221157086, -0.13786221157085998, -0.012862211570859983, 0.04963778842914002, 0.018387788429140017, 0.0027627884291400173, -0.005049711570859983, -0.0011434615708599827, 0.0008096634291400173, -0.00016689907085998268, 0.0003213821791400173, 7.724155414001732e-05, -4.482875835998268e-05, 1.620639789001732e-05, -1.4311180234982679e-05, 9.476088275173211e-07, -6.681785703732679e-06, -2.867088438107679e-06, -9.597398052951789e-07, -6.065488888928883e-09], label = 'Dichotomie')
Sécante = plt.plot([i for i in range(2, 6)], [-0.0007826536380182159, -2.4786300162893404e-05, -7.849546265203955e-07, -2.4858619718237662e-08], label = 'Sécante')
plt.xlabel('n')
plt.ylabel('e_n')
plt.legend()
plt.grid()
plt.show()


#question 3

#équation numéro 3
"""
def g3(x):
    return(math.log(7/x))

print(PointFixe(g3, 2, 10**(-10), 50000))
alpha = 1.5243452049466713
print(PointFixeAlpha(g3, 1, 10**(-10), 50000, 1.5243452049466713))

def f3(x):
    return (x*(math.exp(x)) - 7)

def f3der(x):
    return(math.exp(x) + x*(math.exp(x)))

print(Newton(f3, f3der, 1, 10**(-14), 50000))
alpha = 1.5243452049841444
print(NewtonAlpha(f3, f3der, 1, 10**(-10), 50000, alpha))

print(Dichotomie(f3, 1, 2, 10**(-14), 50000))
alpha = 1.5243452049841508
print(DichotomieAlpha(f3, 1, 2, 10**(-10), 50000, 1.5243452049841508))

print(Secante(f3, 1, 2, 10**(-14), 50000))
alphaf3 = 1.5243452049841424
print(SecanteAlpha(f3, 1, 2, 10**(-10), 50000, 1.5243452049841424))
"""
#graphique de la fonction f3 selon les 4 méthodes

plt.title("Fonction f3")
p3 = plt.plot([i for i in range(2, 7)], [0.04224428742092212, 0.0012178750388327497, 1.0347119014930684e-06, 7.474021401776554e-13, 0.0], label = 'Newton')
p33 = plt.plot([i for i in range(2, 20)], [0.05103405821534279, 0.015015238041700796, 0.0043847850449361125, 0.001277611403668777, 0.000372020279907348, 0.00010830588172083822, 3.1529237551009004e-05, 9.178419583477648e-06, 2.671900685369266e-06, 7.778074933018075e-07, 2.2642467856215376e-07, 6.591364676289402e-08, 1.9187875066606352e-08, 5.585709450528498e-09, 1.626033530044424e-09, 4.733471392626143e-10, 1.3779288821069713e-10, 4.0111025612077356e-11], label = 'Secante')
p333 = plt.plot([i for i in range(2, 36)], [0.024345204984150826, 0.22565479501584917, 0.10065479501584917, 0.038154795015849174, 0.006904795015849174, 0.008720204984150826, 0.0009077049841508256, 0.0029985450158491744, 0.0010454200158491744, 6.885751584917443e-05, 0.00041942373415082557, 0.00017528310915082557, 5.321279665082557e-05, 7.822359599174433e-06, 2.2695218525825567e-05, 7.436429463325567e-06, 1.9296506792443324e-07, 3.6217321977005668e-06, 1.7143835648880668e-06, 7.607092484818168e-07, 2.8387209027869176e-07, 4.545351117712926e-08, 7.375577837365199e-08, 1.4151133598261367e-08, 1.5651188789433945e-08, 7.50027595586289e-10, 6.700553001337539e-09, 2.975262702875625e-09, 1.112617553644668e-09, 1.8129497902918956e-10, 2.843663082785497e-10, 5.1535664624680066e-11, 6.487965720225475e-11, 6.671996288787341e-12], label = 'Dichotomie')
p3333 = plt.plot([i for i in range(2, 57)], [0.2441648664696343, 0.17456398666591566, 0.10842144901419037, 0.07378279496724227, 0.04726800009888654, 0.031499670532281865, 0.020453782255471786, 0.013508913546562473, 0.008823071041299757, 0.005804921681182629, 0.0038009084610450827, 0.0024965835561303606, 0.0016364673970998833, 0.0010741310655262293, 0.0007044025864200165, 0.0004622086137173742, 0.00030317178605154815, 0.00019890641047615176, 0.0001304778858934874, 8.559974773292289e-05, 5.615345495169066e-05, 3.683849542324147e-05, 2.4166412950332727e-05, 1.5853823026379388e-05, 1.0400299051083195e-05, 6.8228830925054496e-06, 4.4758714796699905e-06, 2.9363248110758633e-06, 1.9262220776194994e-06, 1.2637018724781512e-06, 8.289505220027138e-07, 5.438698136295272e-07, 3.567270194793082e-07, 2.3408192273421946e-07, 1.5350021032034533e-07, 1.0076117429314024e-07, 6.603922497738779e-08, 4.3385068870804844e-08, 2.8399389506716943e-08, 1.869260635167791e-08, 1.220065581897245e-08, 8.06592304058995e-09, 5.229345623192216e-09, 3.4926082026487393e-09, 2.229162410216645e-09, 1.5244299156336183e-09, 9.379994558855742e-10, 6.774021343858294e-10, 3.8233261001607843e-10, 3.1287372692645476e-10, 1.4319501140391822e-10, 1.5599477265482165e-10, 4.027933542261053e-11, 8.848011212592155e-11, 4.011457832575616e-12], label = 'Point Fixe')
plt.xlabel('n')
plt.ylabel('En')
plt.legend()
plt.show()


#équation numéro 6
"""
def g61(x):
    return(math.log((x**2)+3))

print(PointFixe(g61, 2, 10**(-14), 5*10**(4)))
alpha = 1.873122547713051
print(PointFixeAlpha(g61, 2, 10**(-6), 5*10**(4), 1.873122547713051))

def f6(x):
    return (math.exp(x)-(x**2)-3)

def fder6(x):
    return (math.exp(x)-2*x)

print(Newton(f6, fder6, 2, 10**(-14), 5*10**(4)))
alpha = 1.8731225477130435
print(NewtonAlpha(f6, fder6, 2, 10**(-6), 5*10**(4), 1.8731225477130435))

print(Dichotomie(f6, 1, 2, 10**(-14), 50000))
alpha = 1.873122547713045
print(DichotomieAlpha(f6, 1, 2, 10**(-6), 50000, 1.873122547713045))


print(Secante(f6, 1, 2, 10**(-14), 50000))
alpha = 1.8731225477130424
print(SecanteAlpha(f6, 1, 2, 10**(-6), 50000, 1.8731225477130424))

"""
#graphique de la fonction f6 selon les 4 méthodes


plt.title('Fonction f6 selon les 4 méthodes')
PointFixe = plt.plot([i for i in range(2, 22)], [0.04182256759798353, 0.02404965500749423, 0.013835332463654204, 0.007961045059650562, 0.004581484007366354, 0.0026367786792262926, 0.0015176060963624227, 0.0008734834332975172, 0.000502754708228581, 0.0002893749866190731, 0.00016655887020844418, 9.586843944053847e-05, 5.518031689444314e-05, 3.176092127077368e-05, 1.82810949540535e-05, 1.0522318411476661e-05, 6.056486382410853e-06, 3.486021736831546e-06, 2.0065013648373764e-06, 1.154911859702068e-06], label = 'PointFixe')
Newton = plt.plot([i for i in range(2,5)], [0.00011812269408451037, 1.1385845377631654e-08, 2.220446049250313e-16], label ='Newton')
Dichotomie = plt.plot([i for i in range(2,22)], [-0.3731225477130451, -0.1231225477130451, 0.001877452286954906, -0.060622547713045094, -0.029372547713045094, -0.013747547713045094, -0.005935047713045094, -0.002028797713045094, -7.567271304509404e-05, 0.000900889786954906, 0.00041260853695490596, 0.00016846791195490596, 4.639759945490596e-05, -1.4637556795094042e-05, 1.5880021329905958e-05, 6.212322674059578e-07, -7.008162263844042e-06, -3.193464998219042e-06, -1.2861163654065422e-06, -3.3244204900029217e-07], label = 'Dichotomie')
Sécante = plt.plot([i for i in range(2,8)], [-0.010857477432074436, -0.0010802498958186746, -0.00010714908257769551, -1.0624780326651262e-05, -1.053509107729056e-06, -1.0446127451935183e-07], label = 'Sécante')
plt.xlabel('n')
plt.ylabel('e_n')
plt.legend()
plt.grid()
plt.show()

"""
#équation numéro 7

def g7(x):
    return((7-4*math.log(x))/3)

print(PointFixe(g7, 1, 10**(-14), 50000))
alpha = 1.6586562691408768
print(PointFixeAlpha(g7, 1, 10**(-10), 50000, alpha))

def f7(x):
    return (3*x + 4*math.log(x) - 7)

def f7der(x):
    return (3 + 4/x)

print(Newton(f7, f7der, 1, 10**(-14), 50000))
alpha = 1.6586562691408768
print(NewtonAlpha(f7, f7der, 1, 10**(-10), 50000, alpha))

print(Dichotomie(f7, 1, 2, 10**(-14), 50000))
alpha = 1.6586562691408702
print(DichotomieAlpha(f7, 1, 2, 10**(-10), 50000, 1.6586562691408702))

print(Secante(f7, 1, 2, 10**(-14), 50000))
alphaf7 = 1.6586562691408768
print(SecanteAlpha(f7, 1, 2, 10**(-10), 50000, 1.6586562691408768))
"""
#graphique de la fonction f7 selon les 4 méthodes

plt.title("Fonction f7")
p7 = plt.plot([i for i in range(2, 57)], [0.2441648664696343, 0.17456398666591566, 0.10842144901419037, 0.07378279496724227, 0.04726800009888654, 0.031499670532281865, 0.020453782255471786, 0.013508913546562473, 0.008823071041299757, 0.005804921681182629, 0.0038009084610450827, 0.0024965835561303606, 0.0016364673970998833, 0.0010741310655262293, 0.0007044025864200165, 0.0004622086137173742, 0.00030317178605154815, 0.00019890641047615176, 0.0001304778858934874, 8.559974773292289e-05, 5.615345495169066e-05, 3.683849542324147e-05, 2.4166412950332727e-05, 1.5853823026379388e-05, 1.0400299051083195e-05, 6.8228830925054496e-06, 4.4758714796699905e-06, 2.9363248110758633e-06, 1.9262220776194994e-06, 1.2637018724781512e-06, 8.289505220027138e-07, 5.438698136295272e-07, 3.567270194793082e-07, 2.3408192273421946e-07, 1.5350021032034533e-07, 1.0076117429314024e-07, 6.603922497738779e-08, 4.3385068870804844e-08, 2.8399389506716943e-08, 1.869260635167791e-08, 1.220065581897245e-08, 8.06592304058995e-09, 5.229345623192216e-09, 3.4926082026487393e-09, 2.229162410216645e-09, 1.5244299156336183e-09, 9.379994558855742e-10, 6.774021343858294e-10, 3.8233261001607843e-10, 3.1287372692645476e-10, 1.4319501140391822e-10, 1.5599477265482165e-10, 4.027933542261053e-11, 8.848011212592155e-11, 4.011457832575616e-12], label = 'Point Fixe')
p77 = plt.plot([i for i in range(2, 12)], [0.0037004997166345532, 0.00040262672941926425, 4.384377368316095e-05, 4.774773581850411e-06, 5.199983210690817e-07, 5.663065216765517e-08, 6.167386601418912e-09, 6.716609490808878e-10, 7.314637784361366e-11, 7.964962023265798e-12], label = 'Secante')
p777 = plt.plot([i for i in range(2, 36)], [0.15865626914087017, 0.09134373085912983, 0.033656269140870165, 0.028843730859129835, 0.0024062691408701653, 0.013218730859129835, 0.005406230859129835, 0.0014999808591298347, 0.0004531441408701653, 0.0005234183591298347, 3.51371091298347e-05, 0.0002090035158701653, 8.69332033701653e-05, 2.5898047120165302e-05, 4.619531004834698e-06, 1.0639258057665302e-05, 3.0098635264153017e-06, 8.048337392096983e-07, 1.1025148936028017e-06, 1.4884057719655175e-07, 3.2799658100657325e-07, 8.957800190501075e-08, 2.96312876457705e-08, 2.9973357129620126e-08, 1.7103474192481372e-10, 1.4730126451922843e-08, 7.279545854999014e-09, 3.5542555565371003e-09, 1.6916104073061433e-09, 7.602878326906648e-10, 2.9462654538292554e-10, 6.179590172905591e-11, 5.46194200978789e-11, 3.588240815588506e-12], label = 'Dichotomie')
p7777 = plt.plot([i for i in range(2, 6)],[0.007584500906647307, 0.008656114742336074, 0.008656269140872475, 0.008656269140875583], label = 'Newton')
plt.xlabel('n')
plt.ylabel('En')
plt.legend()
plt.show()



#équation numéro 10
"""
def g10(x):
    return math.log(10)-math.log(math.log((x**2)+4))

print(PointFixe(g10, (3/2), 10**(-14), 5*10**(4)))
alpha = 1.6562515236425734
print(PointFixeAlpha(g10, (3/2), 10**(-6), 5*10**(4), 1.6562515236425734))

def f10(x):
    return(math.log((x**2)+4)*math.exp(x)-10)

def fder10(x):
    return(math.exp(x)*(((2*x)/(x**2)+4)+math.log((x**2)+4)))

print(Newton(f10, fder10, (3/2), 10**(-14), 5*10**(4)))
alpha = 1.6562517244982369
print(NewtonAlpha(f10, fder10, (3/2), 10**(-6), 5*10**(4), 1.6562517244982369))

print(Dichotomie(f10, 1, 2, 10**(-14), 50000))
alpha = 1.6562517244982544
print(DichotomieAlpha(f10, 1, 2, 10**(-6), 50000, 1.6562517244982544))

print(Secante(f10, 1, 2, 10**(-14), 50000))
alpha = 1.656251724498249
print(SecanteAlpha(f10, 1, 2, 10**(-6), 50000, 1.656251724498249))
"""
#graphique de la fonction f10 selon les 4 méthodes


plt.title('Fonction f10 selon les 4 méthodes')
PointFixe = plt.plot([i for i in range(2, 11)], [-0.010420114153526061, 0.0026843019464131146, -0.0006905277987940828, 0.00017799703179277593, -4.55616770409506e-05, 1.1979755313307194e-05, -2.8309236022039386e-06, 9.812083190396947e-07, 0.0], label = 'PointFixe')
Newton = plt.plot([i for i in range(2,29)], [0.06546472957638505, 0.042874535341393294, 0.028196176224363434, 0.018592657657034106, 0.01228141380673109, 0.008121762148671996, 0.005374990896688248, 0.0035589335503776187, 0.002357240157305762, 0.0015616422779287653, 0.0010347164290107624, 0.000685649593120008, 0.0004543706984401208, 0.00030111780860186954, 0.00019956046725400078, 0.00013225755792434235, 8.765399862631362e-05, 5.809335285889006e-05, 3.850201478150517e-05, 2.5517727612500707e-05, 1.6912256241896628e-05, 1.1208868486711765e-05, 7.428864577940786e-06, 4.923607267226515e-06, 3.2632065312121483e-06, 2.162747646750063e-06, 1.4333994056148214e-06], label ='Newton')
Dichotomie = plt.plot([i for i in range(2,22)], [-0.15625172449825442, 0.09374827550174558, -0.03125172449825442, 0.03124827550174558, -1.7244982544184495e-06, 0.015623275501745582, 0.0078107755017455816, 0.0039045255017455816, 0.0019514005017455816, 0.0009748380017455816, 0.00048655675174558155, 0.00024241612674558155, 0.00012034581424558155, 5.931065799558155e-05, 2.879307987058155e-05, 1.353429080808155e-05, 5.9048962768315505e-06, 2.0901990112065505e-06, 1.828503783940505e-07, -7.708239380121995e-07], label ='Dichotomie')
Sécante = plt.plot([i for i in range(2,11)], [-0.02888836273730333, -0.005647782040996363, -0.0010990394280752103, -0.0002136743894554094, -4.1535030376405047e-05, -8.073495251004204e-06, -1.5692991519600241e-06, -3.050347505695328e-07, -5.92915470054578e-08], label ='Sécante')
plt.xlabel('n')
plt.ylabel('e_n')
plt.legend()
plt.grid()
plt.show()
